{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/elements/fesm2022/elements.mjs"],
  "sourcesContent": ["/**\n * @license Angular v19.2.14\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentFactoryResolver, NgZone, ApplicationRef, ɵChangeDetectionScheduler as _ChangeDetectionScheduler, ɵisViewDirty as _isViewDirty, ɵmarkForRefresh as _markForRefresh, Injector, Version } from '@angular/core';\nimport { ReplaySubject, merge, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nconst scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule(taskFn, delay) {\n    const id = setTimeout(taskFn, delay);\n    return () => clearTimeout(id);\n  }\n};\n/**\n * Convert a camelCased string to kebab-cased.\n */\nfunction camelToDashCase(input) {\n  return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n/**\n * Check whether the input is an `Element`.\n */\nfunction isElement(node) {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\nlet _matches;\n/**\n * Check whether an `Element` matches a CSS selector.\n * NOTE: this is duplicated from @angular/upgrade, and can\n * be consolidated in the future\n */\nfunction matchesSelector(el, selector) {\n  if (!_matches) {\n    const elProto = Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n/** Gets a map of default set of attributes to observe and the properties they affect. */\nfunction getDefaultAttributeToPropertyInputs(inputs) {\n  const attributeToPropertyInputs = {};\n  inputs.forEach(({\n    propName,\n    templateName,\n    transform\n  }) => {\n    attributeToPropertyInputs[camelToDashCase(templateName)] = [propName, transform];\n  });\n  return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\nfunction getComponentInputs(component, injector) {\n  const componentFactoryResolver = injector.get(ComponentFactoryResolver);\n  const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n\n// NOTE: This is a (slightly improved) version of what is used in ngUpgrade's\n//       `DowngradeComponentAdapter`.\n// TODO(gkalpak): Investigate if it makes sense to share the code.\nfunction extractProjectableNodes(host, ngContentSelectors) {\n  const nodes = host.childNodes;\n  const projectableNodes = ngContentSelectors.map(() => []);\n  let wildcardIndex = -1;\n  ngContentSelectors.some((selector, i) => {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n    return false;\n  });\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const node = nodes[i];\n    const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n  return projectableNodes;\n}\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n  let matchingIndex = defaultIndex;\n  if (isElement(node)) {\n    selectors.some((selector, i) => {\n      if (selector !== '*' && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n      return false;\n    });\n  }\n  return matchingIndex;\n}\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\nconst DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n */\nclass ComponentNgElementStrategyFactory {\n  componentFactory;\n  inputMap = new Map();\n  constructor(component, injector) {\n    this.componentFactory = injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n    for (const input of this.componentFactory.inputs) {\n      this.inputMap.set(input.propName, input.templateName);\n    }\n  }\n  create(injector) {\n    return new ComponentNgElementStrategy(this.componentFactory, injector, this.inputMap);\n  }\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n */\nclass ComponentNgElementStrategy {\n  componentFactory;\n  injector;\n  inputMap;\n  // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.\n  eventEmitters = new ReplaySubject(1);\n  /** Merged stream of the component's output events. */\n  events = this.eventEmitters.pipe(switchMap(emitters => merge(...emitters)));\n  /** Reference to the component that was created on connect. */\n  componentRef = null;\n  /** Callback function that when called will cancel a scheduled destruction on the component. */\n  scheduledDestroyFn = null;\n  /** Initial input values that were set before the component was created. */\n  initialInputValues = new Map();\n  /** Service for setting zone context. */\n  ngZone;\n  /** The zone the element was created in or `null` if Zone.js is not loaded. */\n  elementZone;\n  /**\n   * The `ApplicationRef` shared by all instances of this custom element (and potentially others).\n   */\n  appRef;\n  /**\n   * Angular's change detection scheduler, which works independently of zone.js.\n   */\n  cdScheduler;\n  constructor(componentFactory, injector, inputMap) {\n    this.componentFactory = componentFactory;\n    this.injector = injector;\n    this.inputMap = inputMap;\n    this.ngZone = this.injector.get(NgZone);\n    this.appRef = this.injector.get(ApplicationRef);\n    this.cdScheduler = injector.get(_ChangeDetectionScheduler);\n    this.elementZone = typeof Zone === 'undefined' ? null : this.ngZone.run(() => Zone.current);\n  }\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n  connect(element) {\n    this.runInZone(() => {\n      // If the element is marked to be destroyed, cancel the task since the component was\n      // reconnected\n      if (this.scheduledDestroyFn !== null) {\n        this.scheduledDestroyFn();\n        this.scheduledDestroyFn = null;\n        return;\n      }\n      if (this.componentRef === null) {\n        this.initializeComponent(element);\n      }\n    });\n  }\n  /**\n   * Schedules the component to be destroyed after some small delay in case the element is just\n   * being moved across the DOM.\n   */\n  disconnect() {\n    this.runInZone(() => {\n      // Return if there is no componentRef or the component is already scheduled for destruction\n      if (this.componentRef === null || this.scheduledDestroyFn !== null) {\n        return;\n      }\n      // Schedule the component to be destroyed after a small timeout in case it is being\n      // moved elsewhere in the DOM\n      this.scheduledDestroyFn = scheduler.schedule(() => {\n        if (this.componentRef !== null) {\n          this.componentRef.destroy();\n          this.componentRef = null;\n        }\n      }, DESTROY_DELAY);\n    });\n  }\n  /**\n   * Returns the component property value. If the component has not yet been created, the value is\n   * retrieved from the cached initialization values.\n   */\n  getInputValue(property) {\n    return this.runInZone(() => {\n      if (this.componentRef === null) {\n        return this.initialInputValues.get(property);\n      }\n      return this.componentRef.instance[property];\n    });\n  }\n  /**\n   * Sets the input value for the property. If the component has not yet been created, the value is\n   * cached and set when the component is created.\n   */\n  setInputValue(property, value) {\n    if (this.componentRef === null) {\n      this.initialInputValues.set(property, value);\n      return;\n    }\n    this.runInZone(() => {\n      this.componentRef.setInput(this.inputMap.get(property) ?? property, value);\n      // `setInput` won't mark the view dirty if the input didn't change from its previous value.\n      if (_isViewDirty(this.componentRef.hostView)) {\n        // `setInput` will have marked the view dirty already, but also mark it for refresh. This\n        // guarantees the view will be checked even if the input is being set from within change\n        // detection. This provides backwards compatibility, since we used to unconditionally\n        // schedule change detection in addition to the current zone run.\n        _markForRefresh(this.componentRef.changeDetectorRef);\n        // Notifying the scheduler with `NotificationSource.CustomElement` causes a `tick()` to be\n        // scheduled unconditionally, even if the scheduler is otherwise disabled.\n        this.cdScheduler.notify(6 /* NotificationSource.CustomElement */);\n      }\n    });\n  }\n  /**\n   * Creates a new component through the component factory with the provided element host and\n   * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n   */\n  initializeComponent(element) {\n    const childInjector = Injector.create({\n      providers: [],\n      parent: this.injector\n    });\n    const projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n    this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n    this.initializeInputs();\n    this.initializeOutputs(this.componentRef);\n    this.appRef.attachView(this.componentRef.hostView);\n    this.componentRef.hostView.detectChanges();\n  }\n  /** Set any stored initial inputs on the component's properties. */\n  initializeInputs() {\n    for (const [propName, value] of this.initialInputValues) {\n      this.setInputValue(propName, value);\n    }\n    this.initialInputValues.clear();\n  }\n  /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n  initializeOutputs(componentRef) {\n    const eventEmitters = this.componentFactory.outputs.map(({\n      propName,\n      templateName\n    }) => {\n      const emitter = componentRef.instance[propName];\n      return new Observable(observer => {\n        const sub = emitter.subscribe(value => observer.next({\n          name: templateName,\n          value\n        }));\n        return () => sub.unsubscribe();\n      });\n    });\n    this.eventEmitters.next(eventEmitters);\n  }\n  /** Runs in the angular zone, if present. */\n  runInZone(fn) {\n    return this.elementZone && Zone.current !== this.elementZone ? this.ngZone.run(fn) : fn();\n  }\n}\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\nclass NgElement extends HTMLElement {\n  /**\n   * A subscription to change, connect, and disconnect events in the custom element.\n   */\n  ngElementEventsSubscription = null;\n}\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\nfunction createCustomElement(component, config) {\n  const inputs = getComponentInputs(component, config.injector);\n  const strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n  class NgElementImpl extends NgElement {\n    injector;\n    // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n    // field externs. So using quoted access to explicitly prevent renaming.\n    static ['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n    get ngElementStrategy() {\n      // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n      // now this is tested using a Google internal test suite.\n      if (!this._ngElementStrategy) {\n        const strategy = this._ngElementStrategy = strategyFactory.create(this.injector || config.injector);\n        // Re-apply pre-existing input values (set as properties on the element) through the\n        // strategy.\n        // TODO(alxhub): why are we doing this? this makes no sense.\n        inputs.forEach(({\n          propName,\n          transform\n        }) => {\n          if (!this.hasOwnProperty(propName)) {\n            // No pre-existing value for `propName`.\n            return;\n          }\n          // Delete the property from the DOM node and re-apply it through the strategy.\n          const value = this[propName];\n          delete this[propName];\n          strategy.setInputValue(propName, value, transform);\n        });\n      }\n      return this._ngElementStrategy;\n    }\n    _ngElementStrategy;\n    constructor(injector) {\n      super();\n      this.injector = injector;\n    }\n    attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n      const [propName, transform] = attributeToPropertyInputs[attrName];\n      this.ngElementStrategy.setInputValue(propName, newValue, transform);\n    }\n    connectedCallback() {\n      // For historical reasons, some strategies may not have initialized the `events` property\n      // until after `connect()` is run. Subscribe to `events` if it is available before running\n      // `connect()` (in order to capture events emitted during initialization), otherwise subscribe\n      // afterwards.\n      //\n      // TODO: Consider deprecating/removing the post-connect subscription in a future major version\n      //       (e.g. v11).\n      let subscribedToEvents = false;\n      if (this.ngElementStrategy.events) {\n        // `events` are already available: Subscribe to it asap.\n        this.subscribeToEvents();\n        subscribedToEvents = true;\n      }\n      this.ngElementStrategy.connect(this);\n      if (!subscribedToEvents) {\n        // `events` were not initialized before running `connect()`: Subscribe to them now.\n        // The events emitted during the component initialization have been missed, but at least\n        // future events will be captured.\n        this.subscribeToEvents();\n      }\n    }\n    disconnectedCallback() {\n      // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n      if (this._ngElementStrategy) {\n        this._ngElementStrategy.disconnect();\n      }\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n    subscribeToEvents() {\n      // Listen for events from the strategy and dispatch them as custom events.\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = new CustomEvent(e.name, {\n          detail: e.value\n        });\n        this.dispatchEvent(customEvent);\n      });\n    }\n  }\n  // Add getters and setters to the prototype for each property input.\n  inputs.forEach(({\n    propName,\n    transform\n  }) => {\n    Object.defineProperty(NgElementImpl.prototype, propName, {\n      get() {\n        return this.ngElementStrategy.getInputValue(propName);\n      },\n      set(newValue) {\n        this.ngElementStrategy.setInputValue(propName, newValue, transform);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  });\n  return NgElementImpl;\n}\n\n/**\n * @publicApi\n */\nconst VERSION = new Version('19.2.14');\nexport { NgElement, VERSION, createCustomElement };\n"],
  "mappings": "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",
  "names": []
}
